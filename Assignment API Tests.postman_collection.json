{
	"info": {
		"_postman_id": "cf2be4ce-48a7-4dc4-b3e7-e87db5b3427f",
		"name": "Assignment API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30948381"
	},
	"item": [
		{
			"name": "Get ReqRes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}",
					"host": [
						"{{BaseURL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register to ReqRes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id and token\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('token');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Token is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}{{BaseURI}}/register",
					"host": [
						"{{BaseURL}}{{BaseURI}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login to ReqRes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.token).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Token is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"token\": \"{{token}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}{{BaseURI}}/login",
					"host": [
						"{{BaseURL}}{{BaseURI}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.expect(pm.response.to.have.status(201));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - name, job, id, location, and DOB\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user).to.have.property('name');\r",
							"        pm.expect(user).to.have.property('job');\r",
							"        pm.expect(user).to.have.property('id');\r",
							"        pm.expect(user).to.have.property('location');\r",
							"        pm.expect(user).to.have.property('DOB');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name and job must be non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"  \r",
							"  responseData.forEach(function(user) {\r",
							"    pm.expect(user.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"    pm.expect(user.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ID is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(user){\r",
							"        pm.expect(user.id).to.match(/[A-Za-z0-9]/, \"ID should be in a valid format\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[{\r\n    \"name\": \"Kiran\",\r\n    \"job\": \"Accountant\",\r\n    \"id\": \"201\",\r\n    \"location\": \"Hyderabad\",\r\n    \"DOB\": \"05-12-2000\"\r\n  },{\r\n    \"name\": \"Harish\",\r\n    \"job\": \"Manager\",\r\n    \"id\": \"202\",\r\n     \"location\": \"Vijayawada\",\r\n     \"DOB\": \"15-11-1994\"\r\n  },{\r\n    \"name\": \"Harsha\",\r\n    \"job\": \"Business Development Executive\",\r\n    \"id\": \"203\",\r\n     \"location\": \"Bengalore\",\r\n     \"DOB\": \"12-05-1998\"\r\n  },{\r\n    \"name\": \"Rekha\",\r\n    \"job\": \"Lead\",\r\n    \"id\": \"204\",\r\n     \"location\": \"Pune\",\r\n     \"DOB\": \"31-08-1995\"\r\n  }]\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}{{BaseURI}}/users",
					"host": [
						"{{BaseURL}}{{BaseURI}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}{{BaseURI}}/users",
					"host": [
						"{{BaseURL}}{{BaseURI}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user id to 9",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('email');\r",
							"    pm.expect(responseData).to.have.property('first_name');\r",
							"    pm.expect(responseData).to.have.property('last_name');\r",
							"    pm.expect(responseData).to.have.property('avatar');\r",
							"    pm.expect(responseData).to.have.property('createdAt');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.id).to.be.a('number').and.to.satisfy((id) => id >= 0, 'Id should be a non-negative integer');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that createdAt is a valid date format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n        \"id\": 9,\r\n        \"email\": \"eve.holt@reqres.in\",\r\n        \"first_name\": \"Eve\",\r\n        \"last_name\": \"Holt\",\r\n        \"avatar\": \"https://reqres.in/img/faces/4-image.jpg\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}{{BaseURI}}/users?id=4",
					"host": [
						"{{BaseURL}}{{BaseURI}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "id",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user with id 9",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Validate Status Code is 204', function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}{{BaseURI}}/users?id=9",
					"host": [
						"{{BaseURL}}{{BaseURI}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "id",
							"value": "9"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://reqres.in",
			"type": "string"
		},
		{
			"key": "email",
			"value": "eve.holt@reqres.in",
			"type": "string"
		},
		{
			"key": "password",
			"value": "pistol",
			"type": "string"
		},
		{
			"key": "BaseURI",
			"value": "/api",
			"type": "string"
		},
		{
			"key": "token",
			"value": "QpwL5tke4Pnpja7X4",
			"type": "string"
		}
	]
}